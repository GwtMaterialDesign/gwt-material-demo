$wnd.gwtmaterialdemo.runAsyncCallback54("function lte(){}\nfunction nte(){}\nfunction pte(){}\nfunction rte(){}\nfunction tte(){}\nfunction xte(){}\nfunction zte(){}\nfunction x5c(a,b){a.onshow=b}\nfunction v5c(a,b){a.onclose=b}\nfunction u5c(a,b){a.onclick=b}\nfunction w5c(a,b){a.onerror=b}\nfunction wte(){this.a=new xte;this.b=new zte}\nfunction kte(){oKb.call(this);mKb(this,vte(new wte))}\nfunction bte(a,b,c){zJb();YJb.call(this,a,b,c,(ptd(),ntd))}\nfunction Dte(a){var b;if(!a.d){b=new kte;a.d=b}return a.d}\nfunction Cte(a){var b,c;if(!a.c){c=new bte(MGb(GKb(a.a)),(b=Dte(a),b),Bte(a));rJb((JKb(a.a),c),HMb(JKb(a.a)));a.c=c}return a.c}\nfunction ite(){var a;a=(b5c(),$wnd.navigator.serviceWorker!=null);a||jmd(new lmd(mD(gD(MK,1),B$e,21,0,[])),'Push Notification is not supported',N3e,null);return a}\nfunction jte(){var a,b;if(ite()){if(qOe($wnd.Notification.permission,'granted')){b=new $wnd.Object;b.body='I love GMD';b.icon='https://user.oc-static.com/upload/2017/05/03/14938342186053_01-duration-and-easing.png';a=new $wnd.Notification('GMD Says',b);u5c(a,ivb(nte.prototype.Cf,nte,[]));v5c(a,ivb(pte.prototype.Cf,pte,[]));w5c(a,ivb(rte.prototype.Cf,rte,[]));x5c(a,ivb(tte.prototype.Cf,tte,[]))}else{jmd(new lmd(mD(gD(MK,1),B$e,21,0,[])),'Permission Denied. Update it thru the browser setting',N3e,null)}}}\nfunction vte(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A;b=new Tjc;cQb(b,(c=new R6b,cQb(c,(i=new dmd,ppd(i.b,'Will check if the Notification API is supported'),Is(ho(i.a),(Awb(),(new owb(Bwb(Uxf))).a)),HA(i,Uxf),i)),cQb(c,(j=new CAe,rpd(j,(k=new QOe,k.a+='PwaManager.isPwaSupported()',new iwb(k.a)).a),zo((gxb(),j.tb),Maf,true),j)),zo(c.tb,X6e,true),c));cQb(b,(d=new R6b,cQb(d,(l=new dmd,Is(ho(l.a),(new owb(Bwb(Vxf))).a),HA(l,Vxf),l)),cQb(d,(m=new hXb,oYb(m.k,Vxf),m.k.ob||cQb(m,m.k),gQb(m,a.a),m)),cQb(d,(n=new CAe,rpd(n,(o=new QOe,o.a+='// Will return the following status (see next section) <br> Notification.getPermission();',new iwb(o.a)).a),zo(n.tb,Maf,true),n)),zo(d.tb,X6e,true),d));cQb(b,(e=new R6b,cQb(e,(p=new dmd,Is(ho(p.a),(new owb(Bwb(Wxf))).a),HA(p,Wxf),p)),cQb(e,new rBb((q=new QOe,q.a+='<blockquote> <p><b>denied<\\/b> - The user refuses to have notifications displayed. <\\/p> <p><b>granted<\\/b> - The user accepts having notifications displayed. <\\/p> <p><b>default<\\/b> - The user choice is unknown and therefore the browser will act as if the value were denied. <\\/p> <\\/blockquote>',new iwb(q.a)).a)),zo(e.tb,X6e,true),e));cQb(b,(f=new R6b,cQb(f,(r=new dmd,Is(ho(r.a),(new owb(Bwb(Xxf))).a),HA(r,Xxf),r)),cQb(f,(s=new hXb,oYb(s.k,Xxf),s.k.ob||cQb(s,s.k),gQb(s,a.b),s)),zo(f.tb,X6e,true),f));cQb(b,(g=new R6b,cQb(g,(t=new dmd,Is(ho(t.a),(new owb(Bwb(Yxf))).a),HA(t,Yxf),t)),cQb(g,new rBb((u=new QOe,u.a+='<blockquote> <p><b>actions<\\/b> - The actions array of the notification as specified in the options parameter of the constructor.<\\/p> <p><b>badge<\\/b> - The URL of the image used to represent the notification when there is not enough space to display the notification itself.<\\/p> <p><b>body<\\/b> - The body string of the notification as specified in the options parameter of the constructor.<\\/p> <p><b>data<\\/b> - Returns a structured clone of the notification\\u2019s data.<\\/p> <p><b>dir<\\/b> - The text direction of the notification as specified in the options parameter of the constructor.<\\/p> <p><b>lang<\\/b> - The language code of the notification as specified in the options parameter of the constructor. <\\/p> <p><b>tag<\\/b> - The ID of the notification (if any) as specified in the options parameter of the constructor. <\\/p> <p><b>icon<\\/b> - The URL of the image used as an icon of the notification as specified in the options parameter of the constructor. <\\/p> <p><b>image<\\/b> - The URL of an image to be displayed as part of the notification, as specified in the options parameter of the constructor. <\\/p> <p><b>renotify<\\/b> - Specifies whether the user should be notified after a new notification replaces an old one. <\\/p> <p><b>requireInteraction<\\/b> - A Boolean indicating that a notification should remain active until the user clicks or dismisses it, rather than closing automatically. <\\/p> <p><b>silent<\\/b> - Specifies whether the notification should be silent, i.e. no sounds or vibrations should be issued, regardless of the device settings. <\\/p> <p><b>timestamp<\\/b> - Specifies the time at which a notification is created or applicable (past, present, or future). <\\/p> <p><b>title<\\/b> - The title of the notification as specified in the first parameter of the constructor. <\\/p> <p><b>vibrate<\\/b> - Specifies a vibration pattern for devices with vibration hardware to emit. <\\/p> <\\/blockquote>',new iwb(u.a)).a)),zo(g.tb,X6e,true),g));cQb(b,(h=new R6b,cQb(h,(v=new dmd,Is(ho(v.a),(new owb(Bwb(Zxf))).a),HA(v,Zxf),v)),cQb(h,(w=new CAe,rpd(w,(A=new QOe,A.a+='Notification notification = new Notification(\"GMD Says\", options); <br> // Listen to any Notification events <br> // A handler for the click event. It is triggered each time the user clicks on the notification. <br> notification.setOnclick(param1 -&gt; MaterialToast.fireToast(\"Clicked\")); <br> // A handler for the close event. It is triggered when the user closes the notification. <br> notification.setOnclose(param1 -&gt; MaterialToast.fireToast(\"Closed\")); <br> // A handler for the error event. It is triggered each time the notification encounters an error. <br> notification.setOnerror(param1 -&gt; MaterialToast.fireToast(\"Error\")); <br> // A handler for the show event. It is triggered when the notification is displayed. <br> notification.setOnshow(param1 -&gt; MaterialToast.fireToast(\"Shown\")); <br>',new iwb(A.a)).a),zo(w.tb,Maf,true),w)),zo(h.tb,X6e,true),h));return b}\nvar Uxf='isSupported()',Vxf='Request Permission',Wxf='Permission Status',Xxf='Show Notification',Yxf='Notification Options',Zxf='Notification Handlers';gvb(1120,120,R2e,bte);_.Ee=function cte(){bAe();GJb(this,new dAe(Fjf,'Push messaging provides a simple and effective way to re-engage with your users','pwa/notification/NotificationView',''))};var Rmb=UMe(Mjf,'NotificationPresenter',1120);gvb(1732,129,S2e,kte);var Vmb=UMe(Mjf,'NotificationView',1732);gvb(3216,$wnd.Function,{},lte);_.Cf=function mte(a){mmd('Status: '+cE(a))};gvb(3212,$wnd.Function,{},nte);_.Cf=function ote(a){jmd(new lmd(mD(gD(MK,1),B$e,21,0,[])),'Clicked',N3e,null)};gvb(3213,$wnd.Function,{},pte);_.Cf=function qte(a){jmd(new lmd(mD(gD(MK,1),B$e,21,0,[])),unf,N3e,null)};gvb(3214,$wnd.Function,{},rte);_.Cf=function ste(a){jmd(new lmd(mD(gD(MK,1),B$e,21,0,[])),Ssf,N3e,null)};gvb(3215,$wnd.Function,{},tte);_.Cf=function ute(a){jmd(new lmd(mD(gD(MK,1),B$e,21,0,[])),'Shown',N3e,null)};gvb(2277,1,{},wte);var Umb=UMe(Mjf,'NotificationView_BinderImpl/Widgets',2277);gvb(2278,1,A3e,xte);_.nd=function yte(a){ite()&&$wnd.Notification.requestPermission(ivb(lte.prototype.Cf,lte,[]))};var Smb=UMe(Mjf,'NotificationView_BinderImpl/Widgets/1',2278);gvb(2279,1,A3e,zte);_.nd=function Ate(a){jte()};var Tmb=UMe(Mjf,'NotificationView_BinderImpl/Widgets/2',2279);gvb(1005,1,cbf);_.Yc=function Jte(){YNb(this.b,Cte(this.a.a))};a$e(Jq)(54);\n//# sourceURL=gwtmaterialdemo-54.js\n")
